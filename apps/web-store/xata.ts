// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "webstore-orders",
    columns: [
      { name: "sku", type: "string" },
      { name: "full_name", type: "string" },
      { name: "email", type: "email" },
      { name: "status", type: "text" },
    ],
  },
  { name: "inventory-products", columns: [] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type WebstoreOrders = InferredTypes["webstore-orders"];
export type WebstoreOrdersRecord = WebstoreOrders & XataRecord;

export type InventoryProducts = InferredTypes["inventory-products"];
export type InventoryProductsRecord = InventoryProducts & XataRecord;

export type DatabaseSchema = {
  "webstore-orders": WebstoreOrdersRecord;
  "inventory-products": InventoryProductsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Phil-Leggetter-s-workspace-hc84d7.us-east-1.xata.sh/db/serverless-eda-vercel",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
